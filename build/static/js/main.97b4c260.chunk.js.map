{"version":3,"sources":["components/Filter.js","components/Notification.js","components/PersonForm.js","components/People.js","services/People.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","newFilter","handleFilterChange","react_default","a","createElement","onSubmit","event","preventDefault","htmlFor","id","type","value","onChange","Notification","notification","style","className","PersonForm","newName","handleNameChange","newNumber","handleNumberChange","handleAddName","People","persons","handlePersonDelete","filter","person","name","toLowerCase","includes","map","key","number","onClick","baseUrl","services_People","axios","get","then","response","data","newObject","post","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewFilter","_useState5","_useState6","setNewName","_useState7","_useState8","setNewNumber","_useState9","message","_useState10","setNotification","useEffect","peopleService","people","catch","error","console","log","handleNotification","arguments","length","undefined","setTimeout","components_Notification","components_Filter","target","components_PersonForm","match","find","x","window","confirm","objectSpread","updatedPerson","components_People","personId","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAWeA,SATA,SAAAC,GAAqC,IAAnCC,EAAmCD,EAAnCC,UAAWC,EAAwBF,EAAxBE,mBAC1B,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAU,SAAAC,GAAK,OAAIA,EAAMC,mBAC7BL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,gBAAf,gCACAN,EAAAC,EAAAC,cAAA,SAAOK,GAAG,eAAeC,KAAK,OAAOC,MAAOX,EAAWY,SAAUX,OCIxDY,EARM,SAAAd,GAA2B,IAAzBe,EAAyBf,EAAzBe,aAAcC,EAAWhB,EAAXgB,MACnC,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAWD,GACdb,EAAAC,EAAAC,cAAA,SAAIU,KCeKG,EAlBI,SAAAlB,GAA+E,IAA7EmB,EAA6EnB,EAA7EmB,QAASC,EAAoEpB,EAApEoB,iBAAkBC,EAAkDrB,EAAlDqB,UAAWC,EAAuCtB,EAAvCsB,mBAAoBC,EAAmBvB,EAAnBuB,cAC7E,OACEpB,EAAAC,EAAAC,cAAA,QAAMC,SAAUiB,GACdpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,cAAf,UACAN,EAAAC,EAAAC,cAAA,SAAOK,GAAG,aAAaC,KAAK,OAAOC,MAAOO,EAASN,SAAUO,KAE/DjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,gBAAf,YACAN,EAAAC,EAAAC,cAAA,SAAOK,GAAG,eAAeC,KAAK,OAAOC,MAAOS,EAAWR,SAAUS,KAEnEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,kBCEOa,EAdA,SAAAxB,GAA8C,IAA5CyB,EAA4CzB,EAA5CyB,QAASxB,EAAmCD,EAAnCC,UAAWyB,EAAwB1B,EAAxB0B,mBACnC,OACEvB,EAAAC,EAAAC,cAAA,UACGoB,EAAQE,OAAO,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,cAAcC,SAAS9B,EAAU6B,iBACpEE,IAAI,SAAAJ,GAAM,OACXzB,EAAAC,EAAAC,cAAA,MAAI4B,IAAKL,EAAOC,MACbD,EAAOC,KADV,IACiBD,EAAOM,OACtB/B,EAAAC,EAAAC,cAAA,UAAQO,MAAOgB,EAAOlB,GAAIyB,QAAST,EAAmBE,EAAOC,OAA7D,+BCRJO,EAAU,eAsBDC,EApBA,WAEb,OADgBC,IAAMC,IAAIH,GACXI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAkB5BL,EAfA,SAAAM,GAEb,OADgBL,IAAMM,KAAKR,EAASO,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa5BL,EAVA,SAAC3B,EAAIiC,GAElB,OADgBL,IAAMO,IAAN,GAAAC,OAAaV,EAAb,KAAAU,OAAwBpC,GAAMiC,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5BL,EALA,SAAA3B,GAEb,OADgB4B,IAAMS,OAAN,GAAAD,OAAgBV,EAAhB,KAAAU,OAA2BpC,IAC5B8B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QC0G5BM,EApHH,WAAM,IAAAC,EACeC,mBAAS,IADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACRxB,EADQ0B,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEoBL,mBAAS,IAF7BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAERtD,EAFQuD,EAAA,GAEGC,EAFHD,EAAA,GAAAE,EAGgBR,mBAAS,IAHzBS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGRvC,EAHQwC,EAAA,GAGCC,EAHDD,EAAA,GAAAE,EAIoBX,mBAAS,IAJ7BY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAIRxC,EAJQyC,EAAA,GAIGC,EAJHD,EAAA,GAAAE,EAK0Bd,mBAAS,CAACe,QAAS,GAAIjD,MAAO,iBALxDkD,EAAAd,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKRjD,EALQmD,EAAA,GAKMC,EALND,EAAA,GAOhBE,oBAAU,WACRC,IAEK7B,KAAK,SAAA8B,GACJhB,EAAWgB,KAEZC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAEjB,IAEH,IAAMG,EAAqB,SAACV,GAAkC,IAAzBjD,EAAyB4D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnB,eACzCT,EAAgB,CAACF,UAASjD,UAC1B+D,WAAW,WACTZ,EAAgB,KACf,MAsEL,OACEhE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC2E,EAAD,CAAcjE,aAAcA,EAAakD,QAASjD,MAAOD,EAAaC,QACtEb,EAAAC,EAAAC,cAAC4E,EAAD,CAAQhF,UAAWA,EAAWC,mBAvEP,SAAAK,GACzBkD,EAAalD,EAAM2E,OAAOtE,UAuExBT,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC8E,EAAD,CACEhE,QAASA,EACTC,iBAvEmB,SAAAb,GACvBqD,EAAWrD,EAAM2E,OAAOtE,QAuEpBS,UAAWA,EACXC,mBArEqB,SAAAf,GACzBwD,EAAaxD,EAAM2E,OAAOtE,QAqEtBW,cAtCgB,SAAAhB,GACpBA,EAAMC,iBACN,IAbyBoB,EAanBwD,EAAQ3D,EAAQ4D,KAAK,SAAAC,GAAC,OAAIA,EAAEzD,OAASV,IACvCiE,EACcG,OAAOC,QAAP,GAAA1C,OAAkBsC,EAAMvD,KAAxB,4DAfOD,EAiBFwB,OAAAqC,EAAA,EAAArC,CAAA,GAAIgC,EAAL,CAAYlD,OAAQb,IAhB1CgD,EACUzC,EAAOlB,GAAIkB,GAChBY,KAAK,SAAAkD,GACJpC,EAAW7B,EAAQO,IAAI,SAAAJ,GAAM,OAC3BA,EAAOlB,KAAOgF,EAAchF,GAAKgF,EAAgB9D,OAGzD+C,EAAkB,WAAA7B,OAAYlB,EAAOC,KAAnB,WAAkC,oBAgBlDwC,EAJkB,CAChBxC,KAAMV,EACNe,OAAQb,IAILmB,KAAK,SAAAZ,GACJ0B,EAAW7B,EAAQqB,OAAOlB,MAE3B2C,MAAM,SAAAC,GACLG,EAAkB,gBAAA7B,OAAiB3B,EAAjB,0BAExByC,EAAW,IACXG,EAAa,IACbY,EAAkB,SAAA7B,OAAU3B,EAAV,uBAAwC,sBAiB1DhB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACsF,EAAD,CACElE,QAASA,EACTxB,UAAWA,EACXyB,mBAxEqB,SAAAG,GAAI,OAAI,SAAAtB,GACjCA,EAAMC,iBACN,IAAMgF,EAAUD,OAAOC,QAAP,yBAAA1C,OAAwCjB,EAAxC,OACV+D,EAAWrF,EAAM2E,OAAOtE,MAC1B4E,GACFnB,EACU9D,EAAM2E,OAAOtE,OAClB4B,KAAK,SAAAZ,GACJ0B,EAAW7B,EAAQE,OAAO,SAAAC,GAAM,OAAIA,EAAOlB,IAAMkF,KACjDjB,EAAkB,0BAAA7B,OAAwBjB,EAAxB,kBAA8C,oBAEjE0C,MAAM,SAAAC,GACLG,EAAkB,cAAA7B,OAAYjB,EAAZ,8BC/CVgE,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASX,MACvB,2DCbNY,IAASC,OAAO9F,EAAAC,EAAAC,cAAC6F,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,KAAK,SAAAgE,GACjCA,EAAaC","file":"static/js/main.97b4c260.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({newFilter, handleFilterChange}) => {\n  return (\n    <form onSubmit={event => event.preventDefault()}>\n      <label htmlFor='filter-input'>Rajaa näytettäviä: </label>\n      <input id='filter-input' type='text' value={newFilter} onChange={handleFilterChange} />\n    </form>\n  )\n}\n\nexport default Filter;","import React from 'react';\n\nconst Notification = ({notification, style}) => {\n  return (\n    <div className={style} >\n      <p>{notification}</p>\n    </div>\n  )\n}\n\nexport default Notification;","import React from 'react';\n\nconst PersonForm = ({newName, handleNameChange, newNumber, handleNumberChange, handleAddName}) => {\n  return (\n    <form onSubmit={handleAddName} >\n      <div>\n        <label htmlFor=\"name-input\">Nimi: </label>\n        <input id='name-input' type='text' value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        <label htmlFor=\"number-input\">Numero: </label>\n        <input id='number-input' type='text' value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">lisää</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm;","import React from 'react';\n\nconst People = ({persons, newFilter, handlePersonDelete}) => {\n  return (\n    <ul>\n      {persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n        .map(person => \n        <li key={person.name} >\n          {person.name} {person.number}\n          <button value={person.id} onClick={handlePersonDelete(person.name)}>Delete</button>\n        </li>\n      )}\n    </ul>\n  )\n}\n\nexport default People;","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\n\nimport './index.css';\n\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\nimport PersonForm from './components/PersonForm';\nimport People from './components/People';\nimport peopleService from './services/People';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newFilter, setNewFilter ] = useState('')\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ notification, setNotification ] = useState({message: '', style: 'errorMessage'})\n\n  useEffect(() => {\n    peopleService\n      .getAll()\n        .then(people => {\n          setPersons(people)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n  }, [])\n\n  const handleNotification = (message, style='errorMessage') => {\n    setNotification({message, style});\n    setTimeout(() => {\n      setNotification('')\n    }, 4000)\n  }\n\n  const handleFilterChange = event => {\n    setNewFilter(event.target.value);\n  }\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  }\n\n  const handlePersonDelete = name => event => {\n    event.preventDefault();\n    const confirm = window.confirm(`Do you want to delete ${name} ?`)\n    const personId = event.target.value;\n    if (confirm) {\n      peopleService\n        .remove(event.target.value)\n          .then(person => {\n            setPersons(persons.filter(person => person.id != personId))\n            handleNotification(`Poistettiin henkilö ${name} onnistuneesti`, 'successMessage')\n          })\n          .catch(error => {\n            handleNotification(`Henkilö ${name} oli jo poistettu`);\n          })\n    }\n  }\n\n  const handleUpdateNumber = person => {\n    peopleService\n      .update(person.id, person)\n        .then(updatedPerson => {\n          setPersons(persons.map(person => \n            person.id === updatedPerson.id ? updatedPerson : person\n          ))\n        })\n    handleNotification(`Updated ${person.name} number`, 'successMessage');\n  }\n\n  const handleAddName = event => {\n    event.preventDefault();\n    const match = persons.find(x => x.name === newName);\n    if (match) {\n      const confirm = window.confirm(`${match.name} on jo luettelossa, korvataanko vanha numero uudella?`);\n      if (confirm) {\n        handleUpdateNumber({...match, number: newNumber});\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber,\n      }\n      peopleService\n        .create(newPerson)\n          .then(person => {\n            setPersons(persons.concat(person))\n          })\n          .catch(error => {\n            handleNotification(`Error adding ${newName} to puhelinluettelo`);\n          })\n      setNewName('');\n      setNewNumber('');\n      handleNotification(`Added ${newName} to puhelinluettelo`, 'successMessage');\n    }\n  }\n\n  return (\n    <div>\n      <h1>Puhelinluettelo</h1>\n      <Notification notification={notification.message} style={notification.style} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h2>Lisää uusi</h2>\n      <PersonForm\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n        handleAddName={handleAddName}\n      />\n      <h2>Numerot</h2>\n      <People\n        persons={persons}\n        newFilter={newFilter}\n        handlePersonDelete={handlePersonDelete}\n      />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}